\p => [ð¬¶¤ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.!?,0123456789:;"'_<=>\*\+\-\/\\\@\#\$\%\&\^\|\(\)\[\]\{\}\`\~]
\c => [ẠḄḌẸḤỊḲḶṂṆỌṚṢṬỤṾẈỴẒȦḂĊḊĖḞĠḢİĿṀṄȮṖṘṠṪẆẊẎŻạḅḍẹḥịḳḷṃṇọṛṣṭụṿẉỵẓȧḃċḋėḟġḣŀṁṅȯṗṙṡṫẇẋẏżƁƇƊƑƓƘƝƤƬƲȤɓƈɗƒɠɦƙɱ]
\m => [°¹²³⁴⁵⁶⁷⁸⁹]
\l => [ɲƥʠɼʂƭʋȥÆÇÐÑØŒÞßæçıȷñøœþ€¢£¥…µ¡¿×÷¦©®«»‘’“”°¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾]
\k => [\p\c\l ]
\a => [\k\n]


--- NOPs ---
    space       - [0] A NOOP that can indicate to the parser to sperate tokens.
    (\m+)space  - [0] Repeats that many NOOPs. Pretty useless, but since Noodel is not a fast language this can
                      be used to tweak time requirements.
    new line    - [0] Same as the space.

--- MISC ---
    %[0-9A-F]+  - [0] Use in a STRING to create a Unicode character based off of the hex value.
    ɲ`          - [0] Terminates the script and pops/prints the top of the stack.
    ɲ~          - [1] Gets the top of the stack and clears the properties embdedded into the object (Which only really works with arrays).
    ṛ           - [1] If top is not a number, in which it will gen a random int from `0` to `length(a) - 1`
                  [2] If top is a number, then pop another.
                        `integerify(a)`
                        if `b` is undefined then replace with zero.
                        else `integerify(b)`.
                        Gen a random int from `min(a,b)` and `max(a,b)`.
    ṛ(\d+)      - [0] Gen a random int from zero to provided number.
    Ṛ           - [2] If top is a number, then pop another.
                        `integerify(a)`
                        if `b` is undefined then replace with zero.
                        else `numberify(b)`.
                        Gen a random number from `min(a,b)` and `max(a,b)`.
                  [1] If top is a array or string, then push it back on followed by a random element from the object.
    ƥ           - [0] Move the top of the stack up one cell. Stopping if reached the top. (AKA the end of the array)
    ʠ           - [0] Move the top of the stack down one cell. Stopping if reached the bottom. (AKA the start of the array)
    (\m+)ƥ      - [0] Move the ptr of the stack up the number of cells specified.
    (\m+)ʠ      - [0] Move the ptr of the stack down the number of cells specified.
    µƥ          - [1] Pop top and integerify the object and move that many cells up the stack.
    µʠ          - [1] Pop top and integerify the object and move that many cells down the stack.
    ƥ\*         - [0] Move the ptr of the stack to the top. (Move to the end of the array)
    ʠ\*         - [0] Move the ptr of the stack to the bottom. (Move to the start of the array)
    ı           - [0] Make the object that is currently the top of the stack the new stack.
    ȷ           - [0] Make the parent stack of the current stack the new stack.
    ɲo          - [1] Get top without popping and if is a number, push on zero if is even and one if odd.
                      if is a string or array, then push on zero if the length is even and one if the length is odd.
    ɲe          - [1] Get top without popping and if is a number, push on zero if is odd and one if even.
                      if is a string or array, then push on zero if the length is odd and one if the length is even.
    ɲO          - [1] Pop top and if is a number, push on zero if is even and one if odd.
                      if is a string or array, then push on zero if the length is even and one if the length is odd.
    ɲE          - [1] Pop top and if is a number, push on zero if is odd and one if even.
                      if is a string or array, then push on zero if the length is odd and one if the length is even.
    ɲ!          - [1] Pop top if there is nothing or the value popped is falsy push a one, else push zero.
    ɲ?          - [1] Pop top if there is nothing or the value popped is falsy push a zero, else push one.
    ị           - [1] If there is nothing on the top of the stack, push a one else push a zero.
    ị#          - [1] If the item on the top of the stack is a number, push a one else push a zero.
    ị"          - [1] If the item on the top of the stack is a string, push a one else push a zero.
    ị@          - [1] If the item on the top of the stack is a array, push a one else push a zero.
    ḥ           - [0] Push on a string representation of the script.
    ḥ/          - [0] Push on a string representation of the code following this token.
    ḥ\          - [0] Push on a string representation of the code preceding this token.
    ḥ-          - [0] Push on a string representation of the token that is the parent of this token.
    ḥ|          - [0] Push on a string representation of the token following this token.
    ḥ@          - [0] Push on a string representation of the code of the path that this token belongs to.
    ŀ           - [1] Pop the top and shuffle the item (for numbers it shuffles the digits) and push on the new shuffled item.
    ɲt          - [0] If the top of the stack is truthy, push on "True" else push on "False".
    ɲT          - [0] If the top of the stack is the string "true" (case insensitive) push on 1 and same for "false" except push on 0.

--- Literals ---
 -- String --
    (\p+)        - [0] Pushes on a string based off of the list of tokens present.
    (\m+)(\p+)   - [0] Push the string literal onto the stack the specified number of times.
    µ(\p+)       - [1] Pop off the item on the stack and integerify it then push on the string that many times. 
    “(\c*)       - path.top(STRING(decompress_basic($1)))
    ”(\c*)       - a = string_break(decompress_basic($1)) foreach e in a => e = STRING(e); path.top(ARRAY(a))
    (\c+)‘(\c+)  - path.top(STRING(decompress_occur($1, $2)))
    (\c+)’(\c+)  - a = string_break(decompress_occur($1, $2)) foreach e in a => e = STRING(e); path.top(ARRAY(a))
    (\p)…(\p)    - path.top(STRING($1 +...+ $2))
    µ…(\p)       - a = path.top() a = numerical_eval_numbers(a) path.top(STRING(numberical_eval(a.value) +...+ $1))
    (\p)…µ       - a = path.top() a = numerical_eval_numbers(a) path.top(STRING($1 +...+ numberical_eval(a.value)))
    …            - a = path.top() a = numerical_eval_numbers(a)
                   b = path.top() b = numerical_eval_numbers(b)
                   path.top(STRING(numberical_eval(a.value) +...+ numberical_eval(b.value)))
    ɲZ           - path.top(STRING("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
    ɲz           - path.top(STRING("abcdefghijklmnopqrstuvwxyz"))
    ɲA           - path.top(STRING("¤!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"))
    ɲa           - path.top(STRING("¶¤!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"))
    ɲD           - path.top(STRING("9876543210"))
    ɲd           - path.top(STRING("0123456789"))
    ɲN           - path.top(STRING("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
    ɲn           - path.top(STRING("0123456789abcdefghijklmnopqrstuvwxyz"))
    
 -- Numeric --
    ɲ(-?\d*\.?\d+)  - path.top(NUMBER(valueOf($1)))
    ɲ(-)            - path.top(NUMBER(-1))
    ɲ(-?\d*/\d+)    - path.top(NUMBER(valueOf($1)))

 -- Array --
    #(\d)+…(\d)+    - path.top(ARRAY(NUMBER(valueOf($1)) ,..., NUMBER(valueOf($2))))
    #µ…(\d)+        - a = path.top() a = numerical_eval_numbers(a) path.top(ARRAY(a ,..., NUMBER(valueOf($1))))
    #(\d)+…µ        - a = path.top() a = numerical_eval_numbers(a) path.top(ARRAY(NUMBER(valueOf($2)) ,..., a))
    #…              - a = path.top() a = numerical_eval_numbers(a)
                      b = path.top() b = numerical_eval_numbers(a)
                      path.top(ARRAY(a ,..., b))
    '(\p)…(\p)      - path.top(ARRAY(STRING($1) ,..., STRING($2)))
    'µ…(\p)         - a = path.top() a = numerical_eval_numbers(a) path.top(ARRAY(numberical_eval(a.value) ,..., $1))
    '(\p)…µ         - a = path.top() a = numerical_eval_numbers(a) path.top(ARRAY(STRING($1) ,..., STRING(numberical_eval(a.value)))
    '…              - a = path.top() a = numerical_eval_numbers(a)
                      b = path.top() b = numerical_eval_numbers(a)
                      path.top(ARRAY(STRING(numberical_eval(a.value)) ,..., STRING(numberical_eval(b.value)))

--- Operators ---
    ⁺          - a = path.top() b = path.top() path.top(a.add(b))
    ⁻          - a = path.top() b = path.top() path.top(a.sub(b))
    ⁺s         - a = path.top() b = path.top() path.top(a.add_flip(b))
    ⁻s         - a = path.top() b = path.top() path.top(a.sub_flip(b))
    (\m+)⁺     - a = path.top() for c = 0, c < valueOf($1) and path.first() != undefined, ++c => a = a.add(path.top()); path.top(a)
    (\m+)⁻     - a = path.top() for c = 0, c < valueOf($1) and path.first() != undefined, ++c => a = a.sub(path.top()); path.top(a)
    (\m+)⁺s    - a = path.top() for c = 0, c < valueOf($1) and path.first() != undefined, ++c => a = a.add_flip(path.top()); path.top(a)
    (\m+)⁻s    - a = path.top() for c = 0, c < valueOf($1) and path.first() != undefined, ++c => a = a.sub_flip(path.top()); path.top(a)
    µ⁺         - a = path.top() b = path.top()
                 for c = 0, c < a.integerify().value and path.first != undefined, ++c => b = b.add(path.top()); path.top(b)
    µ⁻         - a = path.top() b = path.top()
                 for c = 0, c < a.integerify().value and path.first != undefined, ++c => b = b.sub(path.top()); path.top(b)
    µ⁺s        - a = path.top() b = path.top()
                 for c = 0, c < a.integerify().value and path.first != undefined, ++c => b = b.add_flip(path.top()); path.top(b)
    µ⁻s        - a = path.top() b = path.top()
                 for c = 0, c < a.integerify().value and path.first != undefined, ++c => b = b.sub_flip(path.top()); path.top(b)
    ⁺(\d+)     - a = path.top() for c = 0, c < valueOf($1), ++c => a = a.increment(tkn); path.top(a)
    ⁻(\d+)     - a = path.top() for c = 0, c < valueOf($1), ++c => a = a.decrement(tkn); path.top(a)
    ⁺s(\d+)    - a = path.top() for c = 0, c < valueOf($1), ++c => a = a.increment_flip(tkn); path.top(a)
    ⁻s(\d+)    - a = path.top() for c = 0, c < valueOf($1), ++c => a = a.decrement_flip(tkn); path.top(a)
    ⁺µ         - a = path.top() b = path.top()
                 if b is NUMBER =>
                   path.top(NUMBER((b.value + a.value)/2))
                 else =>
                   for c = 0, c < a.integerify().value, ++c => b = b.increment(tkn); path.top(b)
    ⁻µ         - a = path.top() b = path.top()
                 if b is NUMBER =>
                   path.top(NUMBER((b.value - a.value)/2))
                 else =>
                 for c = 0, c < a.integerify().value, ++c => b = b.decrement(tkn); path.top(b)
    ⁺sµ        - a = path.top() b = path.top()
                 if b is NUMBER =>
                   path.top(NUMBER(Math.abs(b.value + a.value)/2))
                 else =>
                   for c = 0, c < a.integerify().value, ++c => b = b.increment_flip(tkn); path.top(b)
    ⁻sµ        - a = path.top() b = path.top()
                 if b is NUMBER =>
                   path.top(NUMBER((a.value - b.value)/2))
                 else =>
                   for c = 0, c < a.integerify().value, ++c => b = b.decrement_flip(tkn); path.top(b)
    ɲ%         - a = path.top().integerify() b = path.top()
                 if b is NUMBER => path.top(NUMBER(b.value % a.value))
                 elif b is STRING => [split string into a.value equal parts and push on the whole and then the remainder]
                 elif b is ARRAY => [removes the remainder for the array then pushes the array back on the pushes the remainder]
    ɲ%s        - a = path.top() b = path.top().integerify()
                 if a is NUMBER => path.top(NUMBER(a.value % b.value))
                 elif a is STRING => [split string into b.value equal parts and push on the whole and then the remainder]
                 elif a is ARRAY => [removes the remainder for the array then pushes the array back on the pushes the remainder]
    ×          - a = path.top() b = path.top() path.top(a.mul(b))
    ×s         - a = path.top() b = path.top() path.top(a.mul_flip(b))
    ÷          - a = path.top() b = path.top() path.top(a.div(b))
    ÷s         - a = path.top() b = path.top() path.top(a.div_flip(b))
    ×(-?\d+)   - a = path.top() b = path.top() path.top(a.mul(NUMBER(valueOf($1))))
    ×s(-?\d+)  - a = path.top() b = path.top() path.top(a.mul_flip(NUMBER(valueOf($1))))
    ÷(-?\d+)   - a = path.top() b = path.top() path.top(a.div(NUMBER(valueOf($1))))
    ÷s(-?\d+)  - a = path.top() b = path.top() path.top(a.div_flip(NUMBER(valueOf($1))))

--- Array Like Operators ---
    ɲ_        - a = path.top()
                if a is NUMBER => o.back(NUMBER(a.value * a.value))
                elif a is STRING => foreach s in a.value => path.top(STRING(s))
                elif a is ARRAY => foreach e in a.value => path.top(e)
    ɲl        - a = path.top() path.top(NUMBER(a.length())) # For numbers that means abs.
    ẹ         - a = path.top()
                if a is NUMBER => path.top(NUMBER(a.reciprocal()))
                elif a is STRING => path.top(STRING(a.value.slice(1, a.length()) + a.value.slice(0, 1)))
                elif a is ARRAY => a.value.unshift(a.value.pop()) path.top(a)
    Ẹ         - a = path.top()
                if a is NUMBER => path.top(NUMBER(a.square_root()))
                elif a is STRING => len = a.length() path.top(STRING(a.value.slice(len - 1, len) + a.value.slice(0, len - 1)))
                elif a is ARRAY => a.value.push(a.value.shift()) path.top(a)
    ạ         - a = path.top()
                index = undefined
                delta = undefined
                count = undefined
                if a is NUMBER => index = a.value delta = a.sign() a = path.top() if a == undefined => path.top(NUMBER(index + delta)) exit
                if a is NUMBER => count = a.value a = path.top() if a = undefined => path.top(NUMBER(index + (delta * count))) exit
                if a is NUMBER => path.top(NUMBER(abs((index + (delta * count))%a.value)))
                elif a is STRING or ARRAY =>
                  if a is STRING => a = ARRAY(string_break(a.value))
                  if index == undefined => index = a.props("frame")
                  if index == undefined => index = 0 delta = 1
                  if count == undefined => count = a.props("frame_count")
                  if count == undefined => count = a.length()
                  if delta == undefined => delta = a.props("frame_delta")

                  item = undefined

                  if count != 0 =>
                    index = a.correct_index(index)
                    item = a.access(index)
                    index += delta
                    --count
 
                  if count == 0 =>
                    a.props("frame_count", undefined)
                    a.props("frame", undefined)
                    a.props("frame_delta", undefined)
                  else =>
                    a.props("frame_count", count)
                    a.props("frame", index)
                    a.props("frame_delta", delta)
                  
                  path.top(a)
                  if item != undefined => path.top(item);
    ạ(-?\d*)  - a = path.top()
                index = $1 == "-" ? -1 : valueOf($1)
                delta = $1.contains("-") ? -1 : 1
                count = undefined
                if a is NUMBER => count = a.value a = path.top() if a = undefined => path.top(NUMBER(index + (delta * count))) exit
                if a is NUMBER => path.top(NUMBER(abs((index + (delta * count))%a.value)))
                elif a is STRING or ARRAY =>
                  if a is STRING => a = ARRAY(string_break(a.value))
                  if a.props("frame") != undefined => index = a.props("frame")
                  if count == undefined => count = a.props("frame_count")
                  if count == undefined => count = a.length()

                  item = undefined

                  if count != 0 =>
                    index = a.correct_index(index)
                    item = a.access(index)
                    index += delta
                    --count
 
                  if count == 0 =>
                    a.props("frame_count", undefined)
                    a.props("frame", undefined)
                    a.props("frame_delta", undefined)
                  else =>
                    a.props("frame_count", count)
                    a.props("frame", index)
                    a.props("frame_delta", delta)
                  
                  path.top(a)
                  if item != undefined => path.top(item)
    Ạ           - a = path.top()
                  if a is ARRAY =>
                    b = path.top()
                    if b is ARRAY =>
                      if a.props("frame") == undefined => a.props("frame", 0)
                      item = b.access(a.access(a.props("frame")));
                      a.props("frame", a.correct_index(a.props("frame") + 1))
                      path.top(b)
                      path.top(a)
                      if item != undefined => path.top(item)

--- Casting ---
    ɲ'      - a = path.top()
              if a is ARRAY => foreach e in a.value => e = e.stringify(); path.top(a)
              elif a is NUMBER path.top(a.stringify())
              else path.top(a.reverse())
    ɲ"      - a = path.top()
              if a is STRING => s = "" a = string_null_break(a.value) foreach e in a => s += e; path.top(STRING(s))
              else path.top(a.stringify())
    ɲ#      - a = path.top()
              if a is ARRAY => foreach e in a.value => e = e.numberify(); path.top(a)
              elif a is STRING path.top(a.numberify())
              else path.top(NUMBER(-1 * a.value))
    ɲ       - a = path.top()
              if a is ARRAY => foreach e in a.value => e = e.numberify(); path.top(a)
              elif a is STRING => a = ARRAY(string_null_break(a.value))
                foreach e in a.value => e = NUMBER(valueOf(e));
                if a.length() > 1 => path.top(a) elif a.length == 1 => path.top(a.value[0]) else path.top(NUMBER(0))
              elif a is NUMBER => path.top(NUMBER(-1 * a.abs()))
    ȧ       - a = [] while path.first() != undefined a.push(path.top()); if a.length() != 0 => path.top(ARRAY(a))
    ȧ(\d+)  - a = [] c = valueOf($1) whilec != 0 and path.first() != undefined => a.push(path.top()); if a.length() != 0 => path.top(ARRAY(a))
    µȧ      - a = path.top() if a != undefined => a = a.integerify() b = [] while a.value != 0 and path.first() != undefined => b.push(path.top()) --a.value; path.top(ARRAY(b))
    ʋ       - a = path.top()
              if a is NUMBER => a = ARRAY(factorize_number(a.value)) foreach e in a => e = NUMBER(e); path.top(a)
              elif a is STRING => a = string_break(a.value) foreach e in a => e = STRING(e); path.top(ARRAY(a))
              elif a is ARRAY => path.top(a.reverse())
    ȥ       - a = path.top() path.top(numerical_eval(a))
    ȥ-      - a = path.top() a = numerical_eval(a) a.value *= -1 path.top(a)

--- Loops ---
    ḷ(\k*)       - while(true) => $1
    Ḷ(\k*)       - if tkn.count == undefined => tkn.count = a.integerify().value
                   while(0 < tkn.count) => $1 tkn.count--
                   tkn.count = undefined
    (\m+)Ḷ(\k*)  - if ith item of the stack is an array, loop the length of the array. Else, convert to integer and loop that number of times.
    Ḷ(\d+)(\k*)  - if tkn.count == undefined => tkn.count = valueOf($1)
                   while(0 < tkn.count) => $2 tkn.count--
                   tkn.count = undefined
    ṃ(\k*)       - while(path.first().is_truthy().value == 1) $1
    Ṃ(\k*)       - while(path.top().is_truthy().value == 1) $1
    ṇ(\k*)       - while(path.first().is_truthy()) $1; path.top()
    Ṇ(\k*)       - while(path.first().is_truthy()) path.top() $1;
    ḅ            - break from a loop that is before this command and that does not have a break.
    Ḅ            - a = path.top() if a != undefined && a.is_truthy().value == 1 => path.top(a) else => ḅ
    ɱ            - path.top(NUMBER(get_containing_loop_token().loop_count))
    ọ(\k*)       - a = NUMBER(1); while(path.first().is_truthy().value == 1) a.value = 0 $1; path.top(a);
    Ọ(\k*)       - a = NUMBER(1); while(path.top().is_truthy().value == 1) a.value = 0 $1; path.top(a);
    ƙ            - loop = get_containing_loop__token() if loop.array != undefined => path.top(loop.array.access(loop_count).copy())

--- Time ---
    ḍ              - a = path.top() delay_ms(a.integerify().value)
    ḍ(\d+)         - delay_ms(valueOf($1))
    ḍ[shqeto]      - if $1 == "s" => delay_ms(1000)
                     elif $1 == "h" => delay_ms(500)
                     elif $1 == "q" => delay_ms(250)
                     elif $1 == "e" => delay_ms(125)
                     elif $1 == "t" => delay_ms(100)
                     elif $1 == "o" => delay_ms(10)
    ḍ(\d*)/(\d*)   - num = 1000 den = 1
                     if $1.length > 0 => num *= valueOf($1)
                     if $2.length > 0 => den = valueOf($1)
                     delay_ms(num / den)
    ḍ(\d*)\.(\d*)  - delay_ms(valueOf("0" + $1 + "." + $2 + "0") * 1000)
    Ḍ              - (Provides everything the same as ḍ but multiplies everything by 1000)
    Ƈ              - path.top(NUMBER(clock.now()))
    Ƈs             - path.top(NUMBER(clock.now()/1000))
    Ƈm             - path.top(NUMBER(clock.now()/60000))
    Ƈh             - path.top(NUMBER(clock.now()/3600000))
    Ṭ              - if path.is_timing => path.top(NUMBER(path.stop_timer()))
                     else => path.start_timer()
    Ṭs             - if path.is_timing => path.top(NUMBER(path.stop_timer()/1000))
                     else => path.start_timer()
    Ṭm             - if path.is_timing => path.top(NUMBER(path.stop_timer()/60000))
                     else => path.start_timer()
    Ṭh             - if path.is_timing => path.top(NUMBER(path.stop_timer()/3600000))
                     else => path.start_timer()
    Ƭ              - path.top(NUMBER(path.time_passed()))
    Ƭs             - path.top(NUMBER(path.time_passed()/1000))
    Ƭm             - path.top(NUMBER(path.time_passed()/60000))
    Ƭh             - path.top(NUMBER(path.time_passed()/3600000))
    Ƭb             - path.top(NUMBER(path.start_time))
    Ƭbs            - path.top(NUMBER(path.start_time/1000))
    Ƭbm            - path.top(NUMBER(path.start_time/60000))
    Ƭbh            - path.top(NUMBER(path.start_time/3600000))
    ƈ              - a = path.top() if a is NUMBER => path.top(STRING(DATETIME(a))) [Sat Jan 16 2017 17:46:06 GMT-0500 (Eastern Standard Time)]
    ƈs             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getMilliseconds()))
    ƈS             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getSeconds()))
    ƈm             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getMinutes()))
    ƈh             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getHours()))
    ƈH             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getAmPm())) # One or zero.
    ƈd             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getDay()))
    ƈM             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getMonth()))
    ƈy             - a = path.top() if a is NUMBER => path.top(NUMBER(DATETIME(a).getFullYear()))


--- Printing ---
    þ      - path.stdout(path.first())
    þ(\d+) - [print a copy of the ith item to the screen]
    Þ      - path.stdout(path.top())
    Þ(\d+) - [print the ith item to the screen]
    ç      - path.stdout.clear() path.stdout(path.first())
    ç(\d+) - path.stdout.clear() [print copy of ith item onto the screen]
    Ç      - path.stdout.clear() path.stdout(path.top())
    Ç(\d+) - path.stdout.clear() [print ith item onto the screen]
    ñ      - path.stdout(path.first()) path.stdout(STRING("¶"))
    ñ(\d+) - [print copy of ith item onto the screen] path.stdout(STRING("¶"))
    Ñ      - path.stdout(path.top()) path.stdout(STRING("¶"))
    Ñ(\d+) - [print ith item onto the screen] path.stdout(STRING("¶"))
    Ð      - path.stdout(path.stack)
    ß      - path.stdout.clear()
    ø      - path.stdin(path.first().copy())
    ø(\d+) - [ith item from top of stack copied into stdin]
    Ø      - if path.start == tkn => while path.first() != undefined => path.stdin(path.top())
             else => path.stdin(path.top())
    Ø(\d+) - [ith item from top of stack placed into stdin]
    æ      - path.top(path.stdin().copy())
    æ(\d+) - [ith item in stdin copied then pushed onto the stack]
    Æ      - path.top(path.stdin())
    Æ(\d+) - [ith item in stdin pushed onto the stack]
    

--- Pipe Manipulation ---
    ḃ       - path.top()
    ḃ(\d)+  - a = [] for c = 0, c < valueOf($1) && path.first(), ++c => a.push(path.top()); path.top() for c = a.length, 0 <= c, --c => path.top(a[c])
    Ḃ       - path.jump_up() path.top()
    ċ       - path.bottom()
    ċ(\d)+  - a = [] for c = 0, c < valueOf($1) && path.last(), ++c => a.push(path.bottom()); path.bottom() for c = a.length, 0 <= c, --c => path.bottom(a[c])
    Ċ       - path.reverse_stack()
    ė       - path.bottom(path.top())
    Ė       - path.top(path.bottom())
    ṡ       - a = path.top() b = path.top() path.top(a) path.top(b)
    Ṡ       - a = path.bottom() b = path.bottom() path.bottom(a) path.bottom(b)
    ḋ       - a = path.first() path.top(a.copy())
    (\m+)ḋ  - a = path.first() for c = 0, c < valueOf($1), ++c => path.top(a.copy)

--- String Manipulation ---
    ɲL     - a = path.top()
             path.top(a.to_lowercase())
    ɲU     - a = path.top()
             path.top(a.to_uppercase())
    ɲS     - a = path.top()
             path.top(a.switchcase())
    ṙ      - a = path.top().integerify() b = path.top().integerify() c = path.top()
             path.top(c.relocate(a.value, b.value))
    İ      - a = path.top()
             if a is NUMBER => a = a.stringify()
             if a is STRING =>
               b = path.top().arrayify()
               path.top(STRING(b.value.join(a.value)))
             elif a is ARRAY =>
               b = path.top().stringify()
               path.top(STRING(a.value.join(b.value)))
    ụl     - a = path.top().stringify() path.top(STRING(a.value.left_align))
    ụr     - a = path.top().stringify() path.top(STRING(a.value.right_align))
    ục     - a = path.top().stringify() path.top(STRING(a.value.centralize))
    ụR     - a = path.top().integerify() b = path.top().stringify() path.top(STRING(b.value.right_align, a.value))
    ụC     - a = path.top().integerify() b = path.top().stringify() path.top(STRING(b.value.centralize, a.value))
    ḳ      - a = path.top().stringify() b = path.top().stringify() c = path.top().stringify()
             path.top(STRING(c.value.replace(b.value with a.value)))
    ḳ(\d+) - a = path.top().stringify() b = path.top().stringify() c = path.top().stringify()
             (replace first $1)path.top(STRING(c.value.replace(b.value with a.value)))
    Ḳ      - a = path.top().stringify() b = path.top().stringify() c = path.top().stringify()
             path.top(STRING(c.value.replaceAll(b.value with a.value)))
 U  Ḳ(\d+) - a = path.top().stringify() b = path.top().stringify() c = path.top().stringify()
             (replace every $1)path.top(STRING(c.value.replaceAll(b.value with a.value)))

--- Conditionals --- (POSTPONED)
 U  ⁼         - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(0))
                elif b == undefined => path.top(a) path.top(a.is_truthy())
                else => path.top(b) path.top(a) path.top(a.equals(b))
 U  ⁼s        - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(1))
                elif b == undefined => path.top(a) path.top(a.is_falsy())
                else => path.top(b) path.top(a) path.top(a.equals_flip(b))
 U  ⁼<        - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(-1)) ???
                elif b == undefined => path.top(a) path.top(a.min()) ???
                else => path.top(b) path.top(a) path.top(a.lt(b))
 U  ⁼<s       - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(-100)) ???
                elif b == undefined => path.top(a) path.top(a.min()) ???
                else => path.top(b) path.top(a) path.top(a.lt_flip(b))
 U  ⁼>        - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(.1)) ???
                elif b == undefined => path.top(a) path.top(a.max()) ???
                else => path.top(b) path.top(a) path.top(a.gt(b))
 U  ⁼>s       - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(100)) ???
                elif b == undefined => path.top(a) path.top(a.max()) ???
                else => path.top(b) path.top(a) path.top(a.gt_flip(b))
 U  ⁼!        - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(16)) ???
                elif b == undefined => path.top(a) path.top(a.is_truthy()) ???
                else => path.top(b) path.top(a) path.top(NUMBER(a.equals(b).value == 0 ? 1 : 0))
 U  ⁼!s       - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(256)) ???
                elif b == undefined => path.top(a) path.top(a.is_falsy()) ???
                else => path.top(b) path.top(a) path.top(NUMBER(a.equals_flip(b).value == 0 ? 1 : 0))
 U  ⁼,        - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(-1)) ???
                elif b == undefined => path.top(a) path.top(a.min()) ???
                else => path.top(b) path.top(a) path.top(a.lte(b))
 U  ⁼,s       - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(-100)) ???
                elif b == undefined => path.top(a) path.top(a.min()) ???
                else => path.top(b) path.top(a) path.top(a.lte_flip(b))
 U  ⁼.        - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(.1)) ???
                elif b == undefined => path.top(a) path.top(a.max()) ???
                else => path.top(b) path.top(a) path.top(a.gte(b))
 U  ⁼.s       - a = path.top() b = path.top()
                if a == undefined => path.top(NUMBER(100)) ???
                elif b == undefined => path.top(a.max()) path.top(a) ???
                else => path.top(b) path.top(a) path.top(a.gte_flip(b))

--- All Characters ---
ð¬¶¤ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.!?,0123456789:;"'_<=>*+-/\@#$%&^|()[]{}`~
ẠḄḌẸḤỊḲḶṂṆỌṚṢṬỤṾẈỴẒȦḂĊḊĖḞĠḢİĿṀṄȮṖṘṠṪẆẊẎŻạḅḍẹḥịḳḷṃṇọṛṣṭụṿẉỵẓȧḃċḋėḟġḣŀṁṅȯṗṙṡṫẇẋẏżƁƇƊƑƓƘƝƤƬƲȤɓƈɗƒɠɦƙɱ
ɲƥʠɼʂƭʋȥÆÇÐÑØŒÞßæçıȷñøœþ€¢£¥…µ¡¿×÷¦©®«»‘’“”°¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾
